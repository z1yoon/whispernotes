version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - whisper-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - whisper-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - whisper-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whisper-network

  # Core Application Services
  auth-service:
    build: 
      context: ./services
      dockerfile: auth-service/Dockerfile
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whisper-network

  file-uploader:
    build:
      context: ./services
      dockerfile: file-uploader/Dockerfile
    env_file: .env
    ports:
      - "8002:8002"
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - upload_temp:/tmp/uploads
    environment:
      - EXTERNAL_MINIO_HOST=localhost:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whisper-network

  video-processor:
    build:
      context: ./services
      dockerfile: video-processor/Dockerfile
    env_file: .env
    environment:
      - WHISPER_SERVICE_URL=http://whisper-transcriber:8003
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - processing_temp:/tmp/processing
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - whisper-network

  whisper-transcriber:
    build:
      context: ./services
      dockerfile: whisper-transcriber/Dockerfile
    env_file: .env
    environment:
      - DEVICE=${DEVICE:-cpu}
      - BATCH_SIZE=${WHISPER_BATCH_SIZE:-4}
      - COMPUTE_TYPE=${COMPUTE_TYPE:-float32}
      - MIN_SPEAKERS=${MIN_SPEAKERS:-1}
      - MAX_SPEAKERS=${MAX_SPEAKERS:-5}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s
    ports:
      - "8003:8003"
    volumes:
      - transcription_temp:/tmp/transcription
      - whisper_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whisper-network

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      target: development
    env_file: .env
    ports:
      - "3000:3000"
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - NEXT_TELEMETRY_DISABLED=1
      - FILE_UPLOADER_URL=http://file-uploader:8002
      - AUTH_SERVICE_URL=http://auth-service:8000
      - WHISPER_TRANSCRIBER_URL=http://whisper-transcriber:8003
    networks:
      - whisper-network
    depends_on:
      - auth-service
      - file-uploader
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  upload_temp:
  processing_temp:
  transcription_temp:
  whisper_models:

networks:
  whisper-network:
    driver: bridge